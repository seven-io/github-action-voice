"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var Util_1 = __importDefault(require("./Util"));
var TextTransformer = /** @class */ (function () {
    function TextTransformer() {
    }
    TextTransformer.contacts = function (csv) {
        return Util_1["default"].csvToArray(csv, false)
            .map(function (_a) {
            var _b = __read(_a, 3), id = _b[0], nick = _b[1], number = _b[2];
            return ({
                id: Number.parseInt(id),
                nick: nick,
                number: number
            });
        });
    };
    TextTransformer.pricing = function (csv) {
        var e_1, _a;
        var networks = Util_1["default"].csvToArray(csv, true);
        var countries = [];
        var _loop_1 = function (network) {
            var _b = __read(network, 9), countryCode = _b[0], countryName = _b[1], countryPrefix = _b[2], mcc = _b[3], mncs = _b[4], networkName = _b[5], price = _b[6], features = _b[7], comment = _b[8];
            var country = countries.find(function (c) { return c.countryCode === countryCode; });
            var hasCountry = undefined !== country;
            var obj = country || {
                countryCode: countryCode,
                countryName: countryName,
                countryPrefix: countryPrefix,
                networks: []
            };
            obj.networks.push({
                comment: comment,
                features: features.split(',').filter(function (s) { return '' !== s; }),
                mcc: mcc,
                mncs: mncs.split(','),
                networkName: networkName.trim(),
                price: Number.parseFloat(price)
            });
            if (!hasCountry) {
                countries.push(obj);
            }
        };
        try {
            for (var networks_1 = __values(networks), networks_1_1 = networks_1.next(); !networks_1_1.done; networks_1_1 = networks_1.next()) {
                var network = networks_1_1.value;
                _loop_1(network);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (networks_1_1 && !networks_1_1.done && (_a = networks_1["return"])) _a.call(networks_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return {
            countCountries: countries.length,
            countNetworks: networks.length,
            countries: countries
        };
    };
    TextTransformer.status = function (text) {
        var _a = __read(Util_1["default"].splitByLine(text), 2), report = _a[0], timestamp = _a[1];
        return {
            report: report,
            timestamp: timestamp
        };
    };
    return TextTransformer;
}());
exports["default"] = TextTransformer;
