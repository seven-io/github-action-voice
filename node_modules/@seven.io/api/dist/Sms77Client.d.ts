import { AnalyticsParams, AnalyticsResponse, ContactsParams, ContactsResponse, HooksParams, HooksResponse, JournalParams, JournalResponse, LookupParams, LookupResponse, PricingParams, PricingResponse, SmsDeleteParams, SmsDeleteResponse, SmsParams, SmsResponse, StatusParams, StatusResponse, Subaccount, SubaccountsAutoChargeParams, SubaccountsAutoChargeResponse, SubaccountsCreateParams, SubaccountsCreateResponse, SubaccountsDeleteParams, SubaccountsDeleteResponse, SubaccountsApiParams, SubaccountsTransferCreditsParams, SubaccountsTransferCreditsResponse, SubaccountsAction, SubaccountsResponse, ValidateForVoiceParams, ValidateForVoiceResponse, VoiceParams, VoiceResponse } from './types';
import { BaseClient } from './BaseClient';
export * from './types';
export declare class Sms77Client extends BaseClient {
    analytics: (p?: AnalyticsParams) => Promise<AnalyticsResponse>;
    balance: () => Promise<number>;
    contacts: (p: ContactsParams) => Promise<ContactsResponse>;
    deleteSMS: (p: SmsDeleteParams) => Promise<SmsDeleteResponse>;
    hooks: (p: HooksParams) => Promise<HooksResponse>;
    journal: (p: JournalParams) => Promise<JournalResponse>;
    lookup: (p: LookupParams) => Promise<LookupResponse>;
    pricing: (p?: PricingParams) => Promise<PricingResponse>;
    sms: (p: SmsParams) => Promise<SmsResponse>;
    status: (p: StatusParams) => Promise<StatusResponse>;
    subaccounts: {
        _dynamic: <TAction extends SubaccountsAction, TData, TRes extends SubaccountsResponse>(p: SubaccountsApiParams<TAction, TData>) => Promise<TRes>;
        read: () => Promise<Subaccount[]>;
        create: (p: SubaccountsCreateParams) => Promise<SubaccountsCreateResponse>;
        delete: (p: SubaccountsDeleteParams) => Promise<SubaccountsDeleteResponse>;
        transferCredits: (p: SubaccountsTransferCreditsParams) => Promise<SubaccountsTransferCreditsResponse>;
        autoCharge: (p: SubaccountsAutoChargeParams) => Promise<SubaccountsAutoChargeResponse>;
    };
    validateForVoice: (p: ValidateForVoiceParams) => Promise<ValidateForVoiceResponse>;
    voice: (p: VoiceParams) => Promise<VoiceResponse>;
}
export default Sms77Client;
