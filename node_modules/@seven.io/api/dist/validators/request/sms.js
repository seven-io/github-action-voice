"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.delay = exports.ttl = exports.to = exports.text = exports.label = exports.from = exports.foreign_id = exports.TTL_MIN = exports.TTL_MAX = exports.TEXT_MAX_LENGTH = exports.LABEL_PATTERN = exports.LABEL_MAX_LENGTH = exports.FROM_NUMERIC_MAX = exports.FROM_ALPHANUMERIC_MAX = exports.FROM_ALLOWED_SPECIAL_CHARS = exports.FOREIGN_ID_PATTERN = exports.FOREIGN_ID_MAX_LENGTH = exports.DELAY_PATTERN = exports.DELAY_DATE_FORMAT = exports.DEFAULT_PATTERN = void 0;
var isValid_1 = __importDefault(require("date-fns/isValid"));
var Util_1 = __importDefault(require("../../lib/Util"));
exports.DEFAULT_PATTERN = /[0-9a-z-@_.]/i;
exports.DELAY_DATE_FORMAT = 'yyyy-mm-dd hh:ii';
exports.DELAY_PATTERN = /^([0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/;
exports.FOREIGN_ID_MAX_LENGTH = 64;
exports.FOREIGN_ID_PATTERN = exports.DEFAULT_PATTERN;
exports.FROM_ALLOWED_SPECIAL_CHARS = ['/', ' ', '.', '-', '@', '_', '!', '(', ')', '+', '$', ',', '&',];
exports.FROM_ALPHANUMERIC_MAX = 11;
exports.FROM_NUMERIC_MAX = 16;
exports.LABEL_MAX_LENGTH = 100;
exports.LABEL_PATTERN = exports.DEFAULT_PATTERN;
exports.TEXT_MAX_LENGTH = 1520;
exports.TTL_MAX = Number.MAX_SAFE_INTEGER;
exports.TTL_MIN = 1;
exports["default"] = (function (params) {
    (0, exports.delay)(params.delay);
    (0, exports.foreign_id)(params.foreign_id);
    (0, exports.from)(params.from);
    (0, exports.label)(params.label);
    (0, exports.text)(params.text);
    (0, exports.to)(params.to);
    (0, exports.ttl)(params.ttl);
});
var foreign_id = function (foreignId) {
    if (!foreignId) {
        return;
    }
    if (foreignId.match(exports.FOREIGN_ID_PATTERN)) {
        throw new Error("foreign_id must match the regex pattern ".concat(exports.FOREIGN_ID_PATTERN, "."));
    }
    if (exports.FOREIGN_ID_MAX_LENGTH < foreignId.length) {
        throw new Error("The foreign_id cannot be longer than ".concat(exports.FOREIGN_ID_MAX_LENGTH, " characters."));
    }
};
exports.foreign_id = foreign_id;
var from = function (from) {
    var e_1, _a;
    if (!from || !from.length) {
        return;
    }
    if (from.length > exports.FROM_NUMERIC_MAX) {
        throw new Error('Argument \'from\' may not exceed $numericMax chars.');
    }
    if (from.length > exports.FROM_ALPHANUMERIC_MAX && !Util_1["default"].isNumeric(from)) {
        throw new Error('Argument \'from\' must be numeric. if > $alphaNumericMax chars.');
    }
    try {
        for (var FROM_ALLOWED_SPECIAL_CHARS_1 = __values(exports.FROM_ALLOWED_SPECIAL_CHARS), FROM_ALLOWED_SPECIAL_CHARS_1_1 = FROM_ALLOWED_SPECIAL_CHARS_1.next(); !FROM_ALLOWED_SPECIAL_CHARS_1_1.done; FROM_ALLOWED_SPECIAL_CHARS_1_1 = FROM_ALLOWED_SPECIAL_CHARS_1.next()) {
            var char = FROM_ALLOWED_SPECIAL_CHARS_1_1.value;
            from = from.replace(char, '');
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (FROM_ALLOWED_SPECIAL_CHARS_1_1 && !FROM_ALLOWED_SPECIAL_CHARS_1_1.done && (_a = FROM_ALLOWED_SPECIAL_CHARS_1["return"])) _a.call(FROM_ALLOWED_SPECIAL_CHARS_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    if (!Util_1["default"].isAlphaNumeric(from)) {
        throw new Error('Argument \'from\' must be alphanumeric.');
    }
};
exports.from = from;
var label = function (label) {
    if (!label) {
        return;
    }
    if (label.match(exports.LABEL_PATTERN)) {
        throw new Error("label must match the regex pattern ".concat(exports.LABEL_PATTERN, "."));
    }
    if (exports.LABEL_MAX_LENGTH < label.length) {
        throw new Error("The label cannot be longer than ".concat(exports.LABEL_MAX_LENGTH, " characters."));
    }
};
exports.label = label;
var text = function (text) {
    if (!(text || '').length) {
        throw new Error('You cannot send an empty message.');
    }
    if (exports.TEXT_MAX_LENGTH < text.length) {
        throw new Error("The text cannot be longer than ".concat(exports.TEXT_MAX_LENGTH, " characters."));
    }
};
exports.text = text;
var to = function (to) {
    if (!(to || '').length) {
        throw new Error('You must specify at least one recipient.');
    }
};
exports.to = to;
var ttl = function (ttl) {
    if (!ttl) {
        return;
    }
    if (ttl < exports.TTL_MIN) {
        throw new Error("ttl must be at least ".concat(exports.TTL_MIN, "."));
    }
    if (ttl > exports.TTL_MAX) {
        throw new Error("ttl may not exceed ".concat(exports.TTL_MAX, "."));
    }
};
exports.ttl = ttl;
var delay = function (delay) {
    if (!delay) {
        return;
    }
    if ((0, isValid_1["default"])(delay)) {
        return;
    }
    if (!delay.match(exports.DELAY_PATTERN))
        throw new Error('Delay must be a valid UNIX timestamp or in the format of '
            + "".concat(exports.DELAY_DATE_FORMAT, "."));
};
exports.delay = delay;
